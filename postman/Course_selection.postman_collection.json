{
	"info": {
		"_postman_id": "c0ed3217-1264-40df-b1a8-d1da18b460f1",
		"name": "Course_selection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31230138"
	},
	"item": [
		{
			"name": "Course",
			"item": [
				{
					"name": "Добавить курс 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.exist;\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.exist;\r",
									"    pm.expect(responseData.studentNames).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"NumberOccupiedPlaces and numberAvailablePlaces are non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.be.a('number').and.to.be.at.least(0);\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"информатика\",\r\n    \"limitPerson\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/courses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить курс 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.exist;\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.exist;\r",
									"    pm.expect(responseData.studentNames).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Number of occupied places is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Number of available places is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.numberAvailablePlaces).to.be.a('number');\r",
									"  pm.expect(responseData.numberAvailablePlaces).to.be.at.least(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"математика\",\r\n    \"limitPerson\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/courses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить курс 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.exist;\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.exist;\r",
									"    pm.expect(responseData.studentNames).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Number of occupied places is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Number of available places is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.numberAvailablePlaces).to.be.a('number');\r",
									"  pm.expect(responseData.numberAvailablePlaces).to.be.at.least(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"физика\",\r\n    \"limitPerson\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/courses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить курс НЕКОРРЕКТНЫЙ запрос",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"математика\",\r\n    \"limitPerson\": -5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/courses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Редактировать курс с id = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('numberOccupiedPlaces');\r",
									"    pm.expect(responseData).to.have.property('numberAvailablePlaces');\r",
									"    pm.expect(responseData).to.have.property('studentNames');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Number of occupied places is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.be.a('number').and.to.be.at.least(0, \"Number of occupied places should be non-negative\");\r",
									"});\r",
									"\r",
									"pm.test(\"Number of available places is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.be.a('number').and.to.be.at.least(0, \"Number of available places should be non-negative\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"химия\",\r\n    \"limitPerson\": 8\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/courses/2",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Редактировать курс с id = 2 НЕКОРРЕКТНЫЙ запрос",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"м\",\r\n    \"limitPerson\": 15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/courses/2",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить курс с id = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.exist;\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.exist;\r",
									"    pm.expect(responseData.studentNames).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"NumberOccupiedPlaces and numberAvailablePlaces are non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.be.a('number').and.to.be.at.least(0);\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/courses/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить все курсы",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - title, numberOccupiedPlaces, numberAvailablePlaces, and studentNames\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(course) {\r",
									"        pm.expect(course).to.have.property('title');\r",
									"        pm.expect(course).to.have.property('numberOccupiedPlaces');\r",
									"        pm.expect(course).to.have.property('numberAvailablePlaces');\r",
									"        pm.expect(course).to.have.property('studentNames');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(course => {\r",
									"    pm.expect(course.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"NumberOccupiedPlaces and numberAvailablePlaces are non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(course => {\r",
									"        pm.expect(course.numberOccupiedPlaces).to.be.a('number').that.is.not.lessThan(0);\r",
									"        pm.expect(course.numberAvailablePlaces).to.be.a('number').that.is.not.lessThan(0);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/courses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление курса",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/courses/2",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Student",
			"item": [
				{
					"name": "New student",
					"item": [
						{
							"name": "Добавить студента 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.expect(pm.response.to.have.status(201));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - firstname, lastname, and coursesName\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('firstname');\r",
											"    pm.expect(responseData).to.have.property('lastname');\r",
											"    pm.expect(responseData).to.have.property('coursesName');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"CoursesName should be an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.coursesName).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Иван\",\r\n    \"lastname\": \"Иванов\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавить студента 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.expect(pm.response.to.have.status(201));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - firstname, lastname, and coursesName\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('firstname');\r",
											"    pm.expect(responseData).to.have.property('lastname');\r",
											"    pm.expect(responseData).to.have.property('coursesName');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"CoursesName should be an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.coursesName).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Петр\",\r\n    \"lastname\": \"Петров\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавить студента 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.expect(pm.response.to.have.status(201));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - firstname, lastname, and coursesName\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('firstname');\r",
											"    pm.expect(responseData).to.have.property('lastname');\r",
											"    pm.expect(responseData).to.have.property('coursesName');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"CoursesName should be an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.coursesName).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Артем\",\r\n    \"lastname\": \"Артемов\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавить студента 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.expect(pm.response.to.have.status(201));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - firstname, lastname, and coursesName\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('firstname');\r",
											"    pm.expect(responseData).to.have.property('lastname');\r",
											"    pm.expect(responseData).to.have.property('coursesName');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"CoursesName should be an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.coursesName).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Антон\",\r\n    \"lastname\": \"Жирков\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавить студента НЕКОРРЕКТНЫЕ данные",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status, message, errors, and timestamp\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('errors');\r",
											"    pm.expect(responseData).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each error in the 'errors' array is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.errors).to.be.an('array');\r",
											"  \r",
											"  responseData.errors.forEach(function(error) {\r",
											"    pm.expect(error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should be a non-empty string\");\r",
											"  });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"\",\r\n    \"lastname\": \"Иванов\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление студента 2 НЕКОРРЕКТНО",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.to.have.status(200));\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - firstname, lastname, and coursesName\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('firstname');\r",
											"    pm.expect(responseData).to.have.property('lastname');\r",
											"    pm.expect(responseData).to.have.property('coursesName');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"CoursesName should be an array\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.coursesName).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Николай\",\r\n    \"lastname\": \"Сидоров\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/students/2",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение студента с id = 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех студентов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add course",
					"item": [
						{
							"name": "Запись на студента 1 на курс 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Firstname, lastname, and coursesName exist in the response\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.firstname).to.exist;\r",
											"    pm.expect(responseData.lastname).to.exist;\r",
											"    pm.expect(responseData.coursesName).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"CoursesName array is present and contains expected number of elements\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.coursesName).to.exist;\r",
											"    pm.expect(responseData.coursesName).to.be.an('array');\r",
											"    pm.expect(responseData.coursesName.length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/1/add/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"1",
										"add",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запись на студента 2 на курс 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - firstname, lastname, and coursesName\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.firstname).to.exist;\r",
											"    pm.expect(responseData.lastname).to.exist;\r",
											"    pm.expect(responseData.coursesName).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"CoursesName is an array and not empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.coursesName).to.be.an('array').and.to.have.lengthOf.at.least(1, \"CoursesName should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/2/add/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"2",
										"add",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запись на студента 3 на курс 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - firstname, lastname, and coursesName\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData).to.have.property('firstname');\r",
											"  pm.expect(responseData).to.have.property('lastname');\r",
											"  pm.expect(responseData).to.have.property('coursesName');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Firstname and lastname must be non-empty strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.firstname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Firstname should not be empty\");\r",
											"    pm.expect(responseData.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lastname should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"CoursesName is an array with at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.coursesName).to.be.an('array').with.lengthOf.at.least(1, \"Array should have at least one element\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/3/add/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"3",
										"add",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запись на студента 2 на курс 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/2/add/2",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"2",
										"add",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запись на студента 3 на курс 1 НЕКОРРЕКТНО",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 409\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(409);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status, message, errors, and timestamp\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.status).to.exist;\r",
											"  pm.expect(responseData.message).to.exist;\r",
											"  pm.expect(responseData.errors).to.exist;\r",
											"  pm.expect(responseData.timestamp).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Errors array should not be empty\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/3/add/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"3",
										"add",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Запись на студента 4 на курс 1 НЕКОРРЕКТНО",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 409\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(409);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status, message, errors, and timestamp\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.status).to.exist;\r",
											"    pm.expect(responseData.message).to.exist;\r",
											"    pm.expect(responseData.errors).to.exist;\r",
											"    pm.expect(responseData.timestamp).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/3/add/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"3",
										"add",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех студентов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - firstname, lastname, and coursesName\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    \r",
											"    responseData.forEach(function(student) {\r",
											"        pm.expect(student).to.have.property('firstname');\r",
											"        pm.expect(student).to.have.property('lastname');\r",
											"        pm.expect(student).to.have.property('coursesName');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Firstname and lastname must be non-empty strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(student) {\r",
											"        pm.expect(student.firstname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Firstname should not be empty\");\r",
											"        pm.expect(student.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lastname should not be empty\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/students",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех курсов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"  responseData.forEach(function(course) {\r",
											"    pm.expect(course).to.have.property('title').that.is.a('string');\r",
											"    pm.expect(course).to.have.property('numberOccupiedPlaces').that.is.a('number');\r",
											"    pm.expect(course).to.have.property('numberAvailablePlaces').that.is.a('number');\r",
											"    pm.expect(course).to.have.property('studentNames').that.is.an('array');\r",
											"  });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(course => {\r",
											"        pm.expect(course.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"NumberOccupiedPlaces and numberAvailablePlaces are non-negative integers\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('array');\r",
											"  \r",
											"  responseData.forEach(course => {\r",
											"    pm.expect(course.numberOccupiedPlaces).to.be.a('number').and.to.be.at.least(0);\r",
											"    pm.expect(course.numberAvailablePlaces).to.be.a('number').and.to.be.at.least(0);\r",
											"  });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/courses",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"courses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Leave course",
					"item": [
						{
							"name": "Оставление студентом 1 курса 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - firstname, lastname, and coursesName\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('firstname');\r",
											"    pm.expect(responseData).to.have.property('lastname');\r",
											"    pm.expect(responseData).to.have.property('coursesName');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"CoursesName is an array and is empty\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.coursesName).to.be.an('array');\r",
											"  pm.expect(responseData.coursesName).to.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/1/leave/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"1",
										"leave",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Оставление студентом 1 курса 1 НЕКОРРЕКТНО",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 409\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(409);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status, message, errors, and timestamp\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.status).to.exist;\r",
											"    pm.expect(responseData.message).to.exist;\r",
											"    pm.expect(responseData.errors).to.exist;\r",
											"    pm.expect(responseData.timestamp).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Errors array should not be empty\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.errors).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Errors array should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/1/leave/1",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"1",
										"leave",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление студента 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is null\", function () {\r",
											"    const responseData = xml2Json(pm.response.text());\r",
											"\r",
											"    pm.expect(responseData).to.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/students/3",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"students",
										"3"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "With Time",
			"item": [
				{
					"name": "Добавить курс 4 с окном регистрации (2 стороны)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('title');\r",
									"  pm.expect(responseData).to.have.property('numberOccupiedPlaces');\r",
									"  pm.expect(responseData).to.have.property('numberAvailablePlaces');\r",
									"  pm.expect(responseData).to.have.property('startReg');\r",
									"  pm.expect(responseData).to.have.property('finishReg');\r",
									"  pm.expect(responseData).to.have.property('studentNames');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"NumberOccupiedPlaces is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.be.a('number');\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"NumberAvailablePlaces is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.be.a('number');\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.be.at.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"информатика\",\r\n    \"limitPerson\": 3,\r\n    \"startReg\": \"2024-10-02 00:00 +05:00\",\r\n    \"finishReg\": \"2024-10-27 00:00 +05:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/courses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить курс 5 с окном регистрации (только окончание регистрации)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.exist;\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.exist;\r",
									"    pm.expect(responseData.studentNames).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"NumberOccupiedPlaces and numberAvailablePlaces are non-negative integers\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.numberOccupiedPlaces).to.be.a('number').and.to.be.at.least(0);\r",
									"    pm.expect(responseData.numberAvailablePlaces).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"экономика\",\r\n    \"limitPerson\": 5,\r\n    \"finishReg\": \"2024-10-27 00:00 +03:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/courses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить курс 6 с окном регистрации (регистрация закончилась)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('numberOccupiedPlaces');\r",
									"    pm.expect(responseData).to.have.property('numberAvailablePlaces');\r",
									"    pm.expect(responseData).to.have.property('startReg');\r",
									"    pm.expect(responseData).to.have.property('finishReg');\r",
									"    pm.expect(responseData).to.have.property('studentNames');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Number of occupied places is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.numberOccupiedPlaces).to.exist.and.to.be.a('number');\r",
									"  pm.expect(responseData.numberOccupiedPlaces).to.satisfy((value) => value >= 0, \"Number of occupied places must be non-negative\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Number of available places is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.numberAvailablePlaces).to.exist.and.to.be.a('number');\r",
									"  pm.expect(responseData.numberAvailablePlaces).to.be.at.least(0, \"Number of available places should be non-negative\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"динамика\",\r\n    \"limitPerson\": 5,\r\n    \"finishReg\": \"2024-08-27 00:00 +05:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/courses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить курс 7 с окном регистрации (регистрация еще не началась)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"философия\",\r\n    \"limitPerson\": 10,\r\n    \"startReg\": \"2024-11-27 00:00 +04:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/courses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить студента 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.to.have.status(201));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - firstname, lastname, and coursesName\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('firstname');\r",
									"    pm.expect(responseData).to.have.property('lastname');\r",
									"    pm.expect(responseData).to.have.property('coursesName');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"CoursesName should be an array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.coursesName).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Михаил\",\r\n    \"lastname\": \"Михайлов\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/students",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запись на студента 5 на курс 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Firstname, lastname, and coursesName should exist and be of correct type\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.firstname).to.be.a('string', \"Firstname should be a string\");\r",
									"  pm.expect(responseData.lastname).to.be.a('string', \"Lastname should be a string\");\r",
									"  pm.expect(responseData.coursesName).to.be.an('array', \"CoursesName should be an array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "localhost:8080/students/5/add/4",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"students",
								"5",
								"add",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запись на студента 5 на курс 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema includes required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('firstname');\r",
									"    pm.expect(responseData).to.have.property('lastname');\r",
									"    pm.expect(responseData).to.have.property('coursesName');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "localhost:8080/students/5/add/5",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"students",
								"5",
								"add",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запись на студента 5 на курс 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(409);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('errors');\r",
									"    pm.expect(responseData).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each error in the errors array is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.errors).to.be.an('array');\r",
									"    responseData.errors.forEach(function(error) {\r",
									"        pm.expect(error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should be a non-empty string\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "localhost:8080/students/5/add/6",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"students",
								"5",
								"add",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Запись на студента 5 на курс 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 409\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(409);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - status, message, errors, and timestamp\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.errors).to.exist;\r",
									"    pm.expect(responseData.timestamp).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "localhost:8080/students/5/add/7",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"students",
								"5",
								"add",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех курсов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"  responseData.forEach(function(course) {\r",
									"    pm.expect(course).to.have.property('title').that.is.a('string');\r",
									"    pm.expect(course).to.have.property('numberOccupiedPlaces').that.is.a('number');\r",
									"    pm.expect(course).to.have.property('numberAvailablePlaces').that.is.a('number');\r",
									"    pm.expect(course).to.have.property('studentNames').that.is.an('array');\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(course => {\r",
									"        pm.expect(course.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"NumberOccupiedPlaces and numberAvailablePlaces are non-negative integers\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  \r",
									"  responseData.forEach(course => {\r",
									"    pm.expect(course.numberOccupiedPlaces).to.be.a('number').and.to.be.at.least(0);\r",
									"    pm.expect(course.numberAvailablePlaces).to.be.a('number').and.to.be.at.least(0);\r",
									"  });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/courses",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"courses"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}